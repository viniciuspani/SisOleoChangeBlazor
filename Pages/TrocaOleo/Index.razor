@page "/trocaoleo"
@inject ITrocaOleoService trocaOleoService
@inject IVeiculoService veiculoService
@inject IOleoService oleoService
@inject IFiltroService filtroService

<h3>Troca de Oleos Cadastrados</h3>

<div>
    <a class="btn btn-success" href="trocaoleo/create">Cadastrar Nova Troca de Oleo</a>
</div>
<hr />

@if (trocaOleos == null)
{
    <p><em>Carregando...</em></p>
}
else if (trocaOleos.Count == 0)
{
    <Alerta Exibir=Exibir>
        <h3>@Mensagem</h3>
    </Alerta>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Veiculo</th>
                <th>Oleo</th>
                <th>Filtro</th>
                <th>Km Atual</th>
                <th>Km Proxima Troca</th>
                <th>Quantidade Oleo</th>
                <th>Data da Troca</th>
                <th>Data Proxima Troca</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trocaOleo in trocaOleos)
            {                
                <tr>
                    <td>@trocaOleo.Veiculo.Modelo</td>
                    <td>@trocaOleo.Oleo.Nome</td>
                    <td>@trocaOleo.Filtro.Nome</td>
                    <td>@trocaOleo.KmAtual</td>
                    <td>@trocaOleo.KmProximaTroca</td>
                    <td>@trocaOleo.QuantidadeOleo</td>
                    <td>@trocaOleo.DataTroca.ToString("dd/MM/yyyy")</td>
                    <td>@trocaOleo.DataProximaTroca?.ToString("dd/MM/yyyy")</td>
                </tr>                
            }
        </tbody>
    </table>
    <hr />

    <Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
        <div>Deseja realmente excluir este item?</div>
    </Confirma>
}

@code {
    List<TrocaOleo> trocaOleos { get; set; }

    Oleo oleo = new Oleo();
    Filtro filtro = new Filtro();
    Veiculo veiculo = new Veiculo();

    Confirma? confirma;   
    bool Exibir = false;

    int codigoTrocaOleo;

    [Parameter]
    public string Mensagem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregaTrocaOleos();
    }

    async Task CarregaTrocaOleos()
    {
        try
        {

            trocaOleos = await trocaOleoService.GetTrocaOleosList();
            if (trocaOleos == null)
            {
                Exibir = true;
                Mensagem = "Não há troca de oleos cadastradas ";
            }           
                
        }
        catch (Exception ex)
        {
            Exibir = true;
            Mensagem = "Erro ao carregar dados dos veiculos cadastrados " + ex.StackTrace;
            throw;
        }
    }

    async Task DeletaConfirma()
    {
        try
        {
            await trocaOleoService.DeleteTrocaOleo(codigoTrocaOleo);
            confirma.Ocultar();
            await CarregaTrocaOleos();
        }
        catch (Exception ex)
        {
            Exibir = true;
            Mensagem = "Não foi possivel fazer excluir o item..." + ex.StackTrace;
            throw;
        }
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }

}

